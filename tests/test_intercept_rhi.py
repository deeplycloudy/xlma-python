from pyxlma.lmalib import lma_intercept_rhi
from pyxlma.lmalib.io import read as lma_read
from datetime import timedelta
from os import listdir
import xarray as xr
import numpy as np


def test_intercept_rhi():
    """Test functionality of pyxlma.plot.lma_intercept_rhi"""
    files_to_read = listdir('examples/data/')
    files_to_read = ['examples/data/'+file for file in files_to_read]
    dataset, start_date = lma_read.dataset(files_to_read)
    lma_radar_range, lma_plane_distance, lma_arl, event_mask = lma_intercept_rhi.find_lma_points_near_rhi(dataset, 33.56, -101.81, 1600.0, 225, start_date+timedelta(seconds=30), distance_threshold=500, time_threshold=15)
    lma_indices = np.flatnonzero(event_mask)
    true_radar_range = np.array([-24314.95714263, -24255.42134556, -23947.00309296, -24201.07999466,
       -24216.22494555, -24209.0779143 , -24252.54770026, -24196.90100367,
       -24261.77984816, -24002.07311165, -23977.02349918, -23922.33835871,
       -24061.79138268, -24063.22463418, -24095.4865483 , -23629.07408446,
       -23711.71702149, -23815.42007446, -23801.22424582, -23811.93829348,
       -23880.1053328 , -23787.41575292, -23714.05514112, -23753.40801102,
       -23697.50367439, -23808.79529204, -23702.79936852, -23733.26491339,
       -23654.19223296, -23639.08173578, -23684.40998865, -22516.2312817 ,
       -24956.31925763, -25087.31684706, -25278.91196761, -25284.01320286,
       -25287.53041298, -25404.67473694, -25398.64205462, -25328.81651605,
       -25326.06791898, -25236.99678994, -25662.94030104, -25703.02511737,
       -25733.48865903, -25548.97709685, -25840.7709326 , -26074.465209  ,
       -26135.94920909, -25718.73533927, -26070.13443815, -25742.36675196,
       -26088.72774852, -26150.28911721, -22628.68886763])
    true_plane_distance = np.array([476.82409578, 471.16428085, 324.56896919, 464.99685801,
       443.51557595, 420.92058199, 399.02641209, 300.20108514,
       330.2928808 , 284.48486544, 277.49727128, 228.24504655,
       101.86785646,  46.09758876, 159.49307647, 422.34413364,
       462.82523707, 479.04669236, 450.06522663, 495.67782222,
       458.62470004, 397.71230587, 322.04159886, 358.54206568,
       263.69453322, 215.27970084, 234.5031954 , 274.60201124,
       184.85941046, 153.78011609, 203.25043091, 141.91307406,
       291.47165215, 274.21197041, 378.27769326, 296.90514221,
       280.02141178, 354.41770628, 327.55116845, 385.75338378,
       177.16633758,  35.34312855, 287.23074474, 220.35513643,
       134.09140466,  13.21239026,  82.51552308,   6.20537471,
        46.62220121, 275.7219309 ,  67.74536475, 254.6569667 ,
       175.35763511, 190.40871913, 100.09991281])
    true_radar_arl = np.array([2427.10820635, 2622.80703538, 2642.20087632, 2740.2745904 ,
       2930.63971071, 2752.31680521, 2927.29418501, 2859.50970951,
       3625.92759368, 2942.6473481 , 2931.8120999 , 2970.00909331,
       3111.63730722, 3062.02183736, 2859.75475096, 1394.13388557,
       3537.06953818, 3000.85787932, 2971.55268989, 3552.81355203,
       2836.86606787, 3226.92886031, 2460.49052586, 3200.61752493,
       2790.06678895, 2551.85152503, 2572.98642808, 3500.51837957,
       3063.97138001, 3031.9081397 , 3487.58191853, 6265.1033319 ,
       2473.16902922, 2203.98364055, 2856.44738566, 2345.22649489,
       2515.22474203, 2635.02689176, 2923.88449116, 2959.58956895,
       2263.4423628 , 2731.91960772, 2772.38586661, 2878.88741945,
       2746.43494287, 2584.35605103, 2341.75645168, 2613.90859694,
       2919.30959546, 2614.69497102, 2473.25507194, 2782.82223582,
       2461.79799166, 2377.74468257, 7332.69246886])
    true_lma_ids = np.array([12731, 12733, 12734, 12736, 12741, 12743, 12745, 12752, 12756, 
                             12768, 12769, 12775, 12787, 12788, 12797, 12991, 13002, 13005,
                             13006, 13007, 13008, 13009, 13010, 13011, 13012, 13013, 13015,
                             13016, 13023, 13029, 13030, 13201, 13388, 13390, 13395, 13396,
                             13397, 13399, 13402, 13405, 13408, 13409, 13411, 13412, 13415,
                             13419, 13428, 13437, 13439, 13442, 13443, 13444, 13448, 13451,
                             13556], dtype='uint64')
    assert np.allclose(lma_radar_range, true_radar_range, atol=1e-3)
    assert np.allclose(lma_plane_distance, true_plane_distance, atol=1e-3)
    assert np.allclose(lma_arl, true_radar_arl, atol=1e-3)
    assert np.all(lma_indices == true_lma_ids)

